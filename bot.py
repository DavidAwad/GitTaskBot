#
# @author DavidAwad
#
#

import git
import os
import sys
import subprocess
import click
import requests
import json
import secrets
import extension

# these are the variables for the keyword, and the Repository to be scraping against
key_global = "TODO"
user_global = ''
repo_global = ''

def grab_repo(uname, repo):
    # clone repo into local directory.
    git.Repo.clone_from('https://github.com/'+uname+'/'+repo, 'local/')


# recursively traverse through a directory
def process_repo():
    print 'cleaning out the .git folder'
    proc = subprocess.Popen('rm -rf local/.git', stdout=subprocess.PIPE, shell=True)
    proc.communicate() # pipe output to STDOUT
    # traverse root directory, and list directories as dirs and files as files
    for root, dirs, files in os.walk("local/"):
        # path = root.split('/')
        # print root - 'local/'
        # print dirs - [ folder1/ , folder2/ ]
        # print files
        # go through every line of every file in the given repo
        for inode in files:
            print 'processing : local/'+inode
            process_file('local/'+inode)
        for dirent in dirs:
            iter_direc('local/'+dirent)

# Recursively traverse the directory tree to find files and maintain paths
# note: this isn't an optimal way to do this as it attempts all possibilities
# and simply executes the algorithms on the ones that exist.
def iter_direc(dirent):
    for root, dirs, files in os.walk(dirent):
        # print os.path.basename(root)
        for inode in files:
            print 'processing : '+dirent+'/'+inode
            process_file(dirent+'/'+inode)
        for curr_dirent in dirs:
            # print dirent+'/'+curr_dirent
            iter_direc(dirent+'/'+curr_dirent)

def process_file(arg_file):
    if not os.path.isfile(arg_file) :
        # if os.path.isfile() returns false than we are looking at a file that
        # doesn't exist
        return
    log = open(arg_file,'r')
    FILE = log.readlines()
    log.close()

    ext = extension.file_ext(arg_file)

    in_mem_copy=[]
    markers=[]
    counter=0

    for line in FILE:
        # print line
        counter+=1
        if (key_global in line):
            #  marker now knows where a given TODO is
            markers.append(counter)
            # here you may want to do some splitting/concatenation/formatting to your string
        in_mem_copy.append(line)
    issues = []
    # read in memory copy of markers and print them out.
    for marker in markers:
        # marker is the position of the current TODO
        title = "'{0}' found on line {1} of {2}".format(key_global, marker, arg_file)
        # formatted ```python for example
        description = '```'+ext+'''
'''
        # grab the next 5 lines. Make this the description
        for line in in_mem_copy[marker-1:marker+5]:
            description += line

        description += '''```

This issue generated by [TodoBot](https://github.com/DavidAwad/todobot)
        '''
        # we now have an issue tuple
        current_issue = (title, description)
        # append the tuple to an array of all issue tuples in the file
        issues.append(current_issue)

    for current_issue in issues:
        create_issue(current_issue[0], current_issue[1])


def create_issue(_title, desc):
    # raise issues on the user submitted repositories
    url = 'https://api.github.com/repos/'+user_global+'/'+repo_global+'/issues'

    payload = json.dumps({
                        'title': _title,
                        'body': desc ,
                        })
    if not (user_global and repo_global):
        print "repo and user not passed"

    r = requests.post(
        url,
        auth=(secrets.g_user, secrets.g_pass),
        data= payload
        )
    print r.status_code
    print r.text

    return


@click.command()
@click.option('-key', default='TODO', help='Trigger Keyword.')
@click.option('-user', prompt='GitHub Username?', help='The GitHub Username')
@click.option('-repo', prompt='GitHub Repository', help='The name of the Repository to scan')
def start(key, user, repo):
    """Small CLI to lint your code for keywords and create GitHub issues.
    You can specift a -key TODO or -key ??? and create issues for the ocurrences
    of any string."""
    # print 'downloading http://github.com/'+user+'/'+repo
    global user_global
    global repo_global
    user_global = user
    repo_global = repo

    if key != 'TODO':
        global key_global
        key_global = key
        print 'Linting for special keyword ' + key_global

    grab_repo(user,repo)
    process_repo()


if __name__ == '__main__':
    start()

'''
import inspect

print inspect.__file__
print inspect.currentframe().f_lineno
'''
